function testKanjiConversion() {
  const tests = [
    // Zero.
    { input: 0, expected: "Èõ∂" },

    // Easy stuff.
    { input: 1, expected: "‰∏Ä" },
    { input: 5, expected: "‰∫î" },
    { input: 9, expected: "‰πù" },
    { input: 10, expected: "ÂçÅ" },
    { input: 11, expected: "ÂçÅ‰∏Ä" },
    { input: 13, expected: "ÂçÅ‰∏â" },
    { input: 19, expected: "ÂçÅ‰πù" },
    { input: 20, expected: "‰∫åÂçÅ" },
    { input: 30, expected: "‰∏âÂçÅ" },
    { input: 42, expected: "ÂõõÂçÅ‰∫å" },
    { input: 52, expected: "‰∫îÂçÅ‰∫å" },
    { input: 58, expected: "‰∫îÂçÅÂÖ´" },
    { input: 50, expected: "‰∫îÂçÅ" },
    { input: 73, expected: "‰∏ÉÂçÅ‰∏â" },
    { input: 99, expected: "‰πùÂçÅ‰πù" },

    // Hundreds.
    { input: 100, expected: "Áôæ" },
    { input: 101, expected: "Áôæ‰∏Ä" },
    { input: 110, expected: "ÁôæÂçÅ" },
    { input: 111, expected: "ÁôæÂçÅ‰∏Ä" },
    { input: 200, expected: "‰∫åÁôæ" },
    { input: 222, expected: "‰∫åÁôæ‰∫åÂçÅ‰∫å" },
    { input: 999, expected: "‰πùÁôæ‰πùÂçÅ‰πù" },

    // Thousands.
    { input: 1000, expected: "ÂçÉ" },
    { input: 1001, expected: "ÂçÉ‰∏Ä" },
    { input: 1010, expected: "ÂçÉÂçÅ" },
    { input: 1100, expected: "ÂçÉÁôæ" },
    { input: 1110, expected: "ÂçÉÁôæÂçÅ" },
    { input: 1111, expected: "ÂçÉÁôæÂçÅ‰∏Ä" },
    { input: 2000, expected: "‰∫åÂçÉ" },
    { input: 2222, expected: "‰∫åÂçÉ‰∫åÁôæ‰∫åÂçÅ‰∫å" },
    { input: 9999, expected: "‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù" },

    // ‰∏á (10k) basic.
    { input: 10000, expected: "‰∏Ä‰∏á" },
    { input: 20000, expected: "‰∫å‰∏á" },
    { input: 30000, expected: "‰∏â‰∏á" },
    { input: 99000, expected: "‰πù‰∏á‰πùÂçÉ" },

    // ‰∏á with various combinations.
    { input: 10001, expected: "‰∏Ä‰∏á‰∏Ä" },
    { input: 10010, expected: "‰∏Ä‰∏áÂçÅ" },
    { input: 10100, expected: "‰∏Ä‰∏áÁôæ" },
    { input: 11000, expected: "‰∏Ä‰∏áÂçÉ" },
    { input: 12345, expected: "‰∏Ä‰∏á‰∫åÂçÉ‰∏âÁôæÂõõÂçÅ‰∫î" },
    { input: 23456, expected: "‰∫å‰∏á‰∏âÂçÉÂõõÁôæ‰∫îÂçÅÂÖ≠" },
    { input: 44289, expected: "Âõõ‰∏áÂõõÂçÉ‰∫åÁôæÂÖ´ÂçÅ‰πù" },
    { input: 44389, expected: "Âõõ‰∏áÂõõÂçÉ‰∏âÁôæÂÖ´ÂçÅ‰πù" },
    { input: 99999, expected: "‰πù‰∏á‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù" },

    // Complex numbers under ÂÑÑ.
    { input: 234567, expected: "‰∫åÂçÅ‰∏â‰∏áÂõõÂçÉ‰∫îÁôæÂÖ≠ÂçÅ‰∏É" },
    { input: 345678, expected: "‰∏âÂçÅÂõõ‰∏á‰∫îÂçÉÂÖ≠Áôæ‰∏ÉÂçÅÂÖ´" },
    { input: 456789, expected: "ÂõõÂçÅ‰∫î‰∏áÂÖ≠ÂçÉ‰∏ÉÁôæÂÖ´ÂçÅ‰πù" },
    { input: 9422488, expected: "‰πùÁôæÂõõÂçÅ‰∫å‰∏á‰∫åÂçÉÂõõÁôæÂÖ´ÂçÅÂÖ´" },
    { input: 9836703, expected: "‰πùÁôæÂÖ´ÂçÅ‰∏â‰∏áÂÖ≠ÂçÉ‰∏ÉÁôæ‰∏â" },
    { input: 9999999, expected: "‰πùÁôæ‰πùÂçÅ‰πù‰∏á‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù" },

    // ÂÑÑ (100M) basic.
    { input: 100000000, expected: "‰∏ÄÂÑÑ" },
    { input: 200000000, expected: "‰∫åÂÑÑ" },
    { input: 900000000, expected: "‰πùÂÑÑ" },

    // ÂÑÑ with combinations.
    { input: 100000001, expected: "‰∏ÄÂÑÑ‰∏Ä" },
    { input: 100001000, expected: "‰∏ÄÂÑÑÂçÉ" },
    { input: 100010000, expected: "‰∏ÄÂÑÑ‰∏Ä‰∏á" },
    { input: 123456789, expected: "‰∏ÄÂÑÑ‰∫åÂçÉ‰∏âÁôæÂõõÂçÅ‰∫î‰∏áÂÖ≠ÂçÉ‰∏ÉÁôæÂÖ´ÂçÅ‰πù" },
    { input: 987654321, expected: "‰πùÂÑÑÂÖ´ÂçÉ‰∏ÉÁôæÂÖ≠ÂçÅ‰∫î‰∏áÂõõÂçÉ‰∏âÁôæ‰∫åÂçÅ‰∏Ä" },
    { input: 2036521801, expected: "‰∫åÂçÅÂÑÑ‰∏âÂçÉÂÖ≠Áôæ‰∫îÂçÅ‰∫å‰∏áÂçÉÂÖ´Áôæ‰∏Ä" },

    // Numbers with zeros in various positions.
    { input: 101010, expected: "ÂçÅ‰∏áÂçÉÂçÅ" },
    { input: 1001001, expected: "Áôæ‰∏áÂçÉ‰∏Ä" },
    { input: 10001000, expected: "ÂçÉ‰∏áÂçÉ" },
    { input: 100010001, expected: "‰∏ÄÂÑÑ‰∏Ä‰∏á‰∏Ä" },

    // Edge cases around limits.
    { input: 999999999, expected: "‰πùÂÑÑ‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù‰∏á‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù" },
    { input: 1000000000, expected: "ÂçÅÂÑÑ" },
    { input: 9999999999, expected: "‰πùÂçÅ‰πùÂÑÑ‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù‰∏á‰πùÂçÉ‰πùÁôæ‰πùÂçÅ‰πù" },
    { input: 1e4, expected: "‰∏Ä‰∏á" },
    { input: 1e6, expected: "Áôæ‰∏á" },
    { input: 1e8, expected: "‰∏ÄÂÑÑ" },
    { input: 1e9, expected: "ÂçÅÂÑÑ" },
    { input: 1e12, expected: "‰∏ÄÂÖÜ" },
    { input: 1e16, expected: "‰∏Ä‰∫¨" },
    { input: 1e20, expected: "‰∏ÄÂûì" },
    { input: 1e24, expected: "‰∏ÄÁß≠" },
    { input: 1e28, expected: "‰∏ÄÁ©£" },
    { input: 1e32, expected: "‰∏ÄÊ∫ù" },
    { input: 1e36, expected: "‰∏ÄÊæó" },
    { input: 1e40, expected: "‰∏ÄÊ≠£" },
    { input: 1e44, expected: "‰∏ÄËºâ" },
    { input: 1e48, expected: "‰∏ÄÊ•µ" },
    { input: 1e52, expected: "‰∏ÄÊÅíÊ≤≥Ê≤ô" },
    { input: 1e56, expected: "‰∏ÄÈòøÂÉßÁ•á" },
    { input: 1e60, expected: "‰∏ÄÈÇ£Áî±‰ªñ" },
    { input: 1e64, expected: "‰∏Ä‰∏çÂèØÊÄùË≠∞" },
    { input: 1e68, expected: "‰∏ÄÁÑ°ÈáèÂ§ßÊï∞" },

    // Invalid input.
    { input: -1, expected: "-1" },
    { input: -1000, expected: "-1000" },
    { input: -1000000, expected: "-1000000" },
    { input: Infinity, expected: "Infinity" },
    { input: NaN, expected: "NaN" },
  ];

  let passed = 0;
  let failed = 0;

  console.group("running tests‚Ä¶");
  tests.forEach((test) => {
    const result = convertToKanji(test.input);
    if (result !== test.expected) {
      console.error(
        `‚ùå Failed: ${test.input} ‚Üí got "${result}" but expected "${test.expected}"`
      );
      console.error(`   Number format: ${test.input.toLocaleString()}`);
      failed++;
    } else {
      console.log(`‚úÖ Passed: ${test.input} ‚Üí ${result}`);
      passed++;
    }
  });
  console.groupEnd();

  console.log(`\nüìä Test results`);
  console.log(`üìù Total: ${tests.length}`);
  console.log(`‚úÖ Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);

  if (failed > 0) {
    throw new Error(`‚ö†Ô∏è ${failed} test(s) failed!`);
  }
}

function testNumberGeneration() {
  const tests = [
    {
      desc: "Single number range (1 to 1) with kanji",
      config: {
        minNumber: 1,
        maxNumber: 1,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: "‰∏Ä",
        hasCounter: true,
      },
    },
    {
      desc: "Single number range (2002 to 2002) with kanji",
      config: {
        minNumber: 2002,
        maxNumber: 2002,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: "‰∫åÂçÉ‰∫å",
        hasCounter: true,
      },
    },
    {
      desc: "Single number in arabic (1001 to 1001)",
      config: {
        minNumber: 1001,
        maxNumber: 1001,
        numeralSystem: "arabic",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: "1001",
        hasCounter: true,
      },
    },
    {
      desc: "Single high number (1000000 to 1000000)",
      config: {
        minNumber: 1000000,
        maxNumber: 1000000,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: "Áôæ‰∏á",
        hasCounter: true,
      },
    },
    {
      desc: "Normal range (1 to 2) with kanji",
      config: {
        minNumber: 1,
        maxNumber: 2,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: /^[‰∏Ä‰∫å]$/, // Should be exactly ‰∏Ä or ‰∫å
        hasCounter: true,
      },
    },
    {
      desc: "Both numeral systems enabled (1 to 1)",
      config: {
        minNumber: 1,
        maxNumber: 1,
        numeralSystem: "both",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: /^(1|‰∏Ä)$/, // Should be either 1 or ‰∏Ä
        hasCounter: true,
      },
    },
    {
      desc: "Multiple counters enabled",
      config: {
        minNumber: 1,
        maxNumber: 1,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã", "‰∫∫", "Âåπ"],
      },
      expectedFormat: {
        number: "‰∏Ä",
        hasAnyCounter: true,
        validCounters: ["ÂÄã", "‰∫∫", "Âåπ"],
      },
    },
    {
      desc: "No counters enabled",
      config: {
        minNumber: 1,
        maxNumber: 1,
        numeralSystem: "kanji",
        enabledCounters: [],
      },
      expectedFormat: {
        number: "‰∏Ä",
        hasCounter: false,
      },
    },
    {
      desc: "Zero range (0 to 0) with kanji",
      config: {
        minNumber: 0,
        maxNumber: 0,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: "Èõ∂",
        hasCounter: true,
      },
    },
    {
      desc: "Larger range but still small (5 to 8)",
      config: {
        minNumber: 5,
        maxNumber: 8,
        numeralSystem: "kanji",
        enabledCounters: ["ÂÄã"],
      },
      expectedFormat: {
        number: /^[‰∫îÂÖ≠‰∏ÉÂÖ´]$/,
        hasCounter: true,
      },
    },
  ];

  let passed = 0;
  let failed = 0;

  console.group("running tests‚Ä¶");
  tests.forEach((test) => {
    // Set up config
    Object.assign(state.config, test.config);

    // Generate number
    const result = generateNumber();

    // Find counter if present
    const counter =
      test.config.enabledCounters.find((c) => result.endsWith(c)) || "";
    const hasCounter = counter !== "";
    const numberPart = hasCounter ? result.slice(0, -counter.length) : result;

    // Check format
    const formatCorrect =
      test.expectedFormat.number instanceof RegExp
        ? test.expectedFormat.number.test(numberPart)
        : numberPart === test.expectedFormat.number;

    // Check counter
    let counterCorrect = true;
    if (test.expectedFormat.hasAnyCounter) {
      counterCorrect =
        hasCounter && test.expectedFormat.validCounters.includes(counter);
    } else {
      counterCorrect = hasCounter === test.expectedFormat.hasCounter;
    }

    if (!formatCorrect || !counterCorrect) {
      console.error(`‚ùå Failed: ${test.desc}`);
      console.error(`   Got: "${result}"`);
      console.error(`   Number part: "${numberPart}"`);
      console.error(`   Counter: "${counter}"`);
      console.error(`   Expected number format: ${test.expectedFormat.number}`);
      if (test.expectedFormat.hasAnyCounter) {
        console.error(
          `   Expected one of counters: ${test.expectedFormat.validCounters.join(
            ", "
          )}`
        );
      } else {
        console.error(`   Expected counter: ${test.expectedFormat.hasCounter}`);
      }
      failed++;
    } else {
      console.log(`‚úÖ Passed: ${test.desc} ‚Üí ${result}`);
      passed++;
    }
  });
  console.groupEnd();

  console.log(`\nüìä Test results:`);
  console.log(`üìù Total: ${tests.length}`);
  console.log(`‚úÖ Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);

  if (failed > 0) {
    throw new Error(`‚ö†Ô∏è ${failed} test(s) failed!`);
  }
}

const TEST_GROUPS = [
  {
    name: "kanji conversion tests",
    run: testKanjiConversion,
  },
  {
    name: "number generation tests",
    run: testNumberGeneration,
  },
];

function runAllTests() {
  TEST_GROUPS.forEach((group) => {
    console.group(`running ${group.name}...`);
    group.run();
    console.groupEnd();
  });
}

runAllTests();
